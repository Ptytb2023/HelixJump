//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputMaps/MainInputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace NewInputSystem
{
    public partial class @MainInputMap: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MainInputMap()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainInputMap"",
    ""maps"": [
        {
            ""name"": ""Tower"",
            ""id"": ""921803b9-c59f-4987-8a4d-98aaff46813a"",
            ""actions"": [
                {
                    ""name"": ""DeltaX"",
                    ""type"": ""Value"",
                    ""id"": ""65ce883f-bf3c-4a52-b9a2-87f064268c6b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FirstPress"",
                    ""type"": ""Button"",
                    ""id"": ""7df01781-ad76-4081-bc76-8314a05253c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delta"",
                    ""type"": ""Value"",
                    ""id"": ""a9a4e068-3215-43a2-9b0e-5b9f69b8c812"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""09ad565a-c38e-4da9-a479-1c25085104d2"",
                    ""path"": ""<Touchscreen>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""DeltaX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e152fa6-5155-45d9-a203-594e1da9d0c6"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""DeltaX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afe68870-fb0b-4716-9287-67e8ee24f64b"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""FirstPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07e96f55-8476-478a-81dd-06bf78d315f7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""FirstPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef2b5f35-6b73-4c47-a395-fbeb607ec41c"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64141b07-f570-45c6-aad5-0447c1d13022"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Tower
            m_Tower = asset.FindActionMap("Tower", throwIfNotFound: true);
            m_Tower_DeltaX = m_Tower.FindAction("DeltaX", throwIfNotFound: true);
            m_Tower_FirstPress = m_Tower.FindAction("FirstPress", throwIfNotFound: true);
            m_Tower_Delta = m_Tower.FindAction("Delta", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Tower
        private readonly InputActionMap m_Tower;
        private List<ITowerActions> m_TowerActionsCallbackInterfaces = new List<ITowerActions>();
        private readonly InputAction m_Tower_DeltaX;
        private readonly InputAction m_Tower_FirstPress;
        private readonly InputAction m_Tower_Delta;
        public struct TowerActions
        {
            private @MainInputMap m_Wrapper;
            public TowerActions(@MainInputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @DeltaX => m_Wrapper.m_Tower_DeltaX;
            public InputAction @FirstPress => m_Wrapper.m_Tower_FirstPress;
            public InputAction @Delta => m_Wrapper.m_Tower_Delta;
            public InputActionMap Get() { return m_Wrapper.m_Tower; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TowerActions set) { return set.Get(); }
            public void AddCallbacks(ITowerActions instance)
            {
                if (instance == null || m_Wrapper.m_TowerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TowerActionsCallbackInterfaces.Add(instance);
                @DeltaX.started += instance.OnDeltaX;
                @DeltaX.performed += instance.OnDeltaX;
                @DeltaX.canceled += instance.OnDeltaX;
                @FirstPress.started += instance.OnFirstPress;
                @FirstPress.performed += instance.OnFirstPress;
                @FirstPress.canceled += instance.OnFirstPress;
                @Delta.started += instance.OnDelta;
                @Delta.performed += instance.OnDelta;
                @Delta.canceled += instance.OnDelta;
            }

            private void UnregisterCallbacks(ITowerActions instance)
            {
                @DeltaX.started -= instance.OnDeltaX;
                @DeltaX.performed -= instance.OnDeltaX;
                @DeltaX.canceled -= instance.OnDeltaX;
                @FirstPress.started -= instance.OnFirstPress;
                @FirstPress.performed -= instance.OnFirstPress;
                @FirstPress.canceled -= instance.OnFirstPress;
                @Delta.started -= instance.OnDelta;
                @Delta.performed -= instance.OnDelta;
                @Delta.canceled -= instance.OnDelta;
            }

            public void RemoveCallbacks(ITowerActions instance)
            {
                if (m_Wrapper.m_TowerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITowerActions instance)
            {
                foreach (var item in m_Wrapper.m_TowerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TowerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TowerActions @Tower => new TowerActions(this);
        private int m_MouseSchemeIndex = -1;
        public InputControlScheme MouseScheme
        {
            get
            {
                if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
                return asset.controlSchemes[m_MouseSchemeIndex];
            }
        }
        private int m_TouchscreenSchemeIndex = -1;
        public InputControlScheme TouchscreenScheme
        {
            get
            {
                if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
                return asset.controlSchemes[m_TouchscreenSchemeIndex];
            }
        }
        public interface ITowerActions
        {
            void OnDeltaX(InputAction.CallbackContext context);
            void OnFirstPress(InputAction.CallbackContext context);
            void OnDelta(InputAction.CallbackContext context);
        }
    }
}
